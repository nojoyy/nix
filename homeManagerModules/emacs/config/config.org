#+TITLE: EMACS CONFIG
#+AUTHOR: Noah Joyner
#+DESCRIPTION: Personal Emacs Config
#+AUTO_TANGLE: t
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el 

* Contents                                                              :toc:
- [[#core][Core]]
  - [[#package-management][Package Management]]
  - [[#evil][eVil]]
  - [[#keybinds][Keybinds]]
  - [[#ivycounsel][Ivy/Counsel]]
  - [[#helpful][Helpful]]
  - [[#company][Company]]
  - [[#recovery-clutter][Recovery Clutter]]
  - [[#hydra][Hydra]]
  - [[#recentf][Recentf]]
  - [[#sudo-edit][Sudo Edit]]
- [[#rice][Rice]]
  - [[#all-the-icons][All The Icons]]
  - [[#dashboard][Dashboard]]
  - [[#doom-modeline][Doom Modeline]]
  - [[#doom-themes][Doom Themes]]
  - [[#font-config][Font Config]]
  - [[#tweaks][Tweaks]]
- [[#development][Development]]
  - [[#ai-integration][Ai Integration]]
  - [[#languages][Languages]]
  - [[#project-management][Project Management]]
  - [[#snippets][Snippets]]
  - [[#treemacs][Treemacs]]
  - [[#tweaks-1][Tweaks]]
  - [[#vterm][Vterm]]
- [[#org][Org]]
  - [[#org-ql][Org-Ql]]
  - [[#auto-tangle][Auto Tangle]]
  - [[#enabling-bullets][Enabling Bullets]]
  - [[#enabling-toc][Enabling ToC]]
  - [[#org-roam---disabled][Org Roam - Disabled]]
- [[#misc-modes][Misc Modes]]
  - [[#pdf-support][PDF Support]]

* Core

** Package Management
Set up straight.el as package manager using bootstrap code from [[https://github.com/radian-software/straight.el][their github.]]
Set use-package to use straight be default as well to keep use-package usage consistent.
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
      	"straight/repos/straight.el/bootstrap.el"
    	(or (bound-and-true-p straight-base-dir)
  	    user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
  	(url-retrieve-synchronously
  	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  	 'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Set up use-package to use straight.el
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src

*** Early Init
Set early init vars for straight.el
#+begin_src emacs-lisp :tangle ./early-init.el
(setq package-enable-at-startup nil)
#+end_src

** eVil
Vi emulation layer. Adds vim emulation to emacs in all programming and text editing buffers. Evil collection is a collection of keybind packages designed to integrate vim keybinds into popular emacs packages such as magit.
#+begin_src emacs-lisp
    (use-package evil
      :hook ((prog-mode text-mode) . display-line-numbers-mode)
      :init
      (setq evil-want-integration t
          evil-want-keybinding nil
          evil-want-C-i-jump nil
          evil-respect-visual-line-mode t
          evil-want-Y-yank-to-eol t)
      (evil-mode))

    ;; Keybind collection for evil
    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))
#+end_src


** Keybinds

*** General
Keybind defenitions using general.el
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)

    (general-define-key
     "C-=" 'text-scale-increase
     "C--" 'text-scale-decrease)

    ;; leader key definer
    (general-create-definer nj/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "C-SPC") ;; non evil buffers

    ;; nav and command keybinds
    (nj/leader-keys
      "x" '(counsel-M-x :wk "command")
      "/" '(find-file :wk "goto file")
      ">" '(:ignore t :wk "goto")
      "> r" '(counsel-recentf :wk "goto recent file")
      "> m" '(counsel-bookmark :wk "goto bookmark")
      "> c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "goto emacs config")
      "C-/" '(comment-line :wk "comment lines"))

    (nj/leader-keys
      "TAB" '(evil-window-next :wk "next window"))

    ;; buffer keybinds
    (nj/leader-keys
      "b" '(:ignore t :wk "buffer")
      "b b" '(counsel-switch-buffer :wk "switch to buffer")
      "b i" '(ibuffer :wk "ibuffer")
      "b k" '(kill-this-buffer :wk "kill buffer")
      "b n" '(next-buffer :wk "next buffer")
      "b p" '(previous-buffer :wk "previous buffer")
      "b r" '(revert-buffer :wk "reload buffer"))

    ;; bookmarks
    (nj/leader-keys
      "m" '(:ignore t :wk "bookmarks")
      "m d" '(bookmark-delete :wk "delete bookmark")
      "m l" '(bookmark-bmenu-list :wk "bookmark list")
      "m m" '(bookmark-set :wk "add bookmark")
      "m M" '(bookmark-set-no-overwrite :wk "add permanent bookmark")))
#+end_src


*** Which-Key
Display tooltips on slow keybind inputs
#+begin_src emacs-lisp
    (use-package which-key
      :diminish
      :init
      (which-key-mode 1)
      :custom
      (which-key-idle-delay 0.8)
      (which-key-allow-imprecise-window-fit nil))
#+end_src


** Ivy/Counsel
Rich completion frontend with all-the-icons support. Uses counsel as well.
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-search-i-kill))
    :config
    (ivy-mode 1))

  (use-package counsel
    :diminish
    :after ivy
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :after all-the-icons-ivy-rich
    :after counsel
    :ensure t
    :init (ivy-rich-mode 1)) ;; this gets us descriptions in M-x.
#+end_src


** Helpful
This package extends the default help functionality in emacs to be more intuitive and presentable.
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #' helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key)
    :config
    (nj/leader-keys
      "h" '(:ignore t :wk "help")
      "h f" '(describe-function :wk "describe function")
      "h v" '(describe-variable :wk "describe variable")))
#+end_src


** Company
Auto-completion backend, used in tandem with many development packages
#+begin_src emacs-lisp
  (use-package company
    :defer 2
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))

  (use-package company-box
    :after company
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src


** Recovery Clutter
Set default Emacs backup directory - temp directory
Otherwise by defualt emacs will save backup files to the directory the original file is located in, which creates a mess for git.
#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src


** TODO Hydra
Allows for fast minibuffer based one time keybinds
#+begin_src emacs-lisp
  (use-package hydra)
#+end_src


** Recentf
Recent file list - add exclusions here
#+begin_src emacs-lisp
  (use-package recentf
    :config
    (recentf-mode)
    (add-to-list 'recentf-exclude
  	       "~/.config/emacs/.cache/*"))
#+end_src


** Sudo Edit
Edit buffers using sudo privileges
#+begin_src emacs-lisp
  (use-package sudo-edit
    :config
    (nj/leader-keys
      "s" '(:ignore t :wk "sudo")
      "s /" '(sudo-edit-find-file :wk "sudo find file")
      "s ." '(sudo-edit :wk "sudo edit current file")))
#+end_src


* Rice

** All The Icons
Icon Support - utilized heavily by other packages
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))
  (use-package all-the-icons-dired ;; ATI Dired Support
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src



** Dashboard
Launch page, syncs with recentf, bookmarks, and projectile
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    :custom
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-center-content t) 
    (dashboard-projects-backend 'projectile)
    (dashboard-items '((recents . 8)
                            (agenda . 6)
                            (bookmarks . 6)
                            (projects . 8)))
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))
#+end_src


** Doom Modeline
Better looking modeline from doom emacs
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)) 
  (use-package diminish) ;; Adds ability to diminish modes from modeline
#+end_src



** Doom Themes
Theme management

Create custom themes here:
https://mswift42.github.io/themecreator/

#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
  (use-package doom-themes
    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t)
    :config
    (load-theme 'doom-horizon t))
#+end_src



** Font Config
General UI Font Config

#+begin_src emacs-lisp
  ;;create font default
  (set-face-attribute 'default nil
    :font "FiraCodeNerdFont"
    :weight 'regular)

  ;;make comments italicized
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)

  ;;make keywords italicized
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;;add font to default
  (add-to-list 'default-frame-alist '(font . "FiraCode-12"))

  (set-face-attribute 'variable-pitch nil
                      :font "FiraSans"
                      :height 325
                      :weight 'regular)

  ;;set line spacing
  (setq-default line-spacing 0.20)
#+end_src



** Tweaks
Various GUI tweaks and settings
#+begin_src emacs-lisp
  ;; disable gui bars
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)

  ;; disable startup screen
  (setq inhibit-startup-screen t)  

  ;; relative line numbering
  (setq display-line-numbers-type 'relative)

  ;; visual line mode
  (visual-line-mode t)

  ;; zoom on scroll
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

  ;; scroll margin
  (setq scroll-margin 6)
  (setq scroll-conservatively 100)
#+end_src


* Development

** Ai Integration
Ollama using Ellama - Investigate how to cancel as it is quite annoying when it rambles on
#+begin_src emacs-lisp
  (use-package ellama
    :init
    (setopt ellama-keymap-prefix "C-c e")
    (require 'llm-ollama)
    :config
    (setq ellama-session-auto-save nil)
    (nj/leader-keys
      "e" '(:ignore t :wk "ellama")
      "e c" '(:ignore t :wk "code")
      "e c a" '(ellama-code-add :wk "ellama add code")
      "e c c" '(ellama-code-complete :wk "ellama code complete")
      "e c r" '(ellama-code-review :wk "ellama code review")
      "e c r" '(ellama-code-edit :wk "ellama code edit")
      "e C" '(ellama-complete :wk "ellama complete")
      "e e" '(ellama-chat :wk "ellama chat")))
#+end_src


** Languages

*** LSP
LSP Mode provides a client hook for communicating with language server protocol
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l"
        gc-cons-threshold 100000000)
    :config
    (lsp-enable-which-key-integration t))

  ;; optionally
  ;; (use-package lsp-ui :commands lsp-ui-mode)
  ;; if you are ivy user
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  (use-package dap-mode)
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
#+end_src


*** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :mode "\\.rs\\'")
#+end_src


*** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :hook (nix-mode . lsp-deferred)
    :mode "\\.nix\\'")
#+end_src


*** TypeScript
#+begin_src emacs-lisp
  (use-package coverlay)

  (use-package s)
  (use-package origami)

  (use-package typescript-mode
    :hook
    (typescript-ts-mode . lsp-deferred)
    (tsx-ts-mode . lsp-deferred)
    :mode ("\\.ts\\'" . 'typescript-ts-mode)
    :mode ("\\.tsx\\'" . 'tsx-ts-mode)
    :config
    (setq typescript-indent-level 2))
  
  ;; ;; TypeScript Interactive Development Environment
  (use-package tide
    :ensure t
    :after typescript-mode company flycheck
    :hook
    (typescript-ts-mode . tide-setup)
    (tsx-ts-mode . tide-setup)
    (typescript-ts-mode . tide-hl-identifier-mode)
    (tide-mode . electric-pair-mode))

  (setq company-tooltip-align-annotations t)
#+end_src



** Project Management

*** Magit
Git management mode for emacs
#+begin_src emacs-lisp
  (use-package magit
    :config
    (nj/leader-keys
      "g" '(:ignore t :wk "git")
      "g s" '(magit-status :wk "magit status")))
#+end_src

**** Git Time Machine - Disabled
Allows for easy review of past commits
+begin_src emacs-lisp
(use-package git-timemachine
  :after magit
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision)
)
+end_src


*** Projectile
Project management for emacs - could be argued core
#+begin_src emacs-lisp
  (use-package projectile
    :diminish
    :config (projectile-mode 1)
    (nj/leader-keys ;; keybinds
      "p" '(projectile-command-map :wk "projectile"))
    (setq projectile-project-search-path '("~/projects/")))
  #+end_src


** Snippets
#+begin_src 
(use-package yasnippet)
#+end_src
  
** Treemacs
Folder tree/hierarchary viewer for projects
#+begin_src emacs-lisp
  (use-package treemacs
    :defer t
    :diminish
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-width 28)
      (treemacs-follow-mode t)
      (treemacs-project-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-`"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil))

  (use-package treemacs-projectile
    :after (treemacs projectile))

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))

  (use-package treemacs-magit
    :after (treemacs magit))

  (use-package treemacs-all-the-icons
    :after (treemacs all-the-icons)
    :config (treemacs-load-theme "all-the-icons"))

  (use-package treemacs-tab-bar
    :after (treemacs)
    :config (treemacs-set-scope-type 'Tabs))
#+end_src



** Tweaks

*** Misc
#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src


*** Rainbow Delimiters
Applies rainbow effect to delimiters and groups to sort out nesting errors
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src


*** Rainbow Mode
Render colors as a color, i.e. #ffa500
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :diminish
    :hook 
    ((org-mode prog-mode) . rainbow-mode))
#+end_src


** Vterm
Terminal emulator for emacs - requires c compilation to install so it is pre-installed via nix
#+begin_src emacs-lisp
  (defun nj/vterm-close ()
    (interactive)
      (vterm-clear)
      (evil-window-delete))

  (use-package vterm
    :config
    (add-to-list 'display-buffer-alist
  	       '("\*vterm\*"
  		 (display-buffer-in-side-window)
  		 (window-height . 0.25)
  		 (side . bottom)
  		 (slot . 0)))
    (nj/leader-keys
  "v" '(vterm :wk "open vterm"))
  (define-key vterm-mode-map (kbd "C-<escape>") 'nj/vterm-close))
#+end_src


* Org
The ever-powerful...
#+begin_src emacs-lisp
    (use-package org
      :hook (org-mode . visual-line-mode)
      :config
      (require 'org-tempo) ;; allows for quick block execution
      ;; Keybinds
      (nj/leader-keys
        "o" '(:ignore t :wk "org mode")
        ;; agenda
        "o a" '(org-agenda :wk "org agenda")
        ;; edit src
        "o e" '(org-edit-special :wk "org edit")
        "o s" '(org-edit-src-exit :wk "org exit edit")
        "o c" '(org-edit-src-abort :wk "org abort edit")
        ;; tags
        "o q" '(org-set-tags-command :wk "org add tags"))

        ;; org-todo/agenda
        (setq org-agenda-files
    	    '("~/documents/org/projects.org"))

        (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
    			      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")
  			      (sequence "WANT(w)" "|" "HAVE")))

        (setq org-tag-alist
    	    '(;; Spaces
    	      ("@home" . ?H)
    	      ("@work" . ?W)
    	      ;; Devices
    	      ("@phone" . ?P)
    	      ("@computer" . ?c)

    	      ;; Activities
    	      ("@planning" . ?p)
    	      ("@dev" . ?d)
    	      ("@errands" . ?e)
    	      ("@social" . ?s)
    	      ("@calls" . ?C)
    	      ))
        
      :custom
       (org-hide-emphasis-markers nil)
       (org-startup-indented t) ;; match indentions
       ;; org src-blocks
       (org-src-fontify-natively t)
       (org-src-tab-acts-natively t))
#+end_src

** Org-Ql
Query language for searching for org entries, makes designing custom agenda entries easier
#+begin_src 
 (use-package org-ql)
#+end_src

** Auto Tangle
Adds functionality for auto-tangling Org files to source files.
Otherwise, to tangle you must run 'org-babel-tangle'.
To enable auto-tangling for a given file, set the auto_tangle header to true. 
#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src


** Enabling Bullets
This package enable UTF-8 bullets to org, looks a lot nicer than default *.
#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src


** Enabling ToC
Allows for auto-generated Table of Contents in Org Mode buffers. Add headline with :toc: flag.
#+begin_src emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-mode))
#+end_src


** Org Roam - Disabled
Non-heirarchical node-based note manger
Disabled

(use-package org-roam
  :config
  (setq org-roam-directory (file-truename "~/org-roam")
        find-file-visit-truename t)
  (org-roam-db-autosync-mode))




  
  
  
* Misc Modes
** PDF Support
pdf-tools must be installed via nixos
#+begin_src 
  
#+end_src

